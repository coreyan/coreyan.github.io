import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-Dlids_7N.js";const p={},e=t(`<h1 id="密码加密的文章" tabindex="-1"><a class="header-anchor" href="#密码加密的文章"><span>密码加密的文章</span></a></h1><p>实际的文章内容。</p><p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p><p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGenericClass<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token comment">//定义泛型接口</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericClass<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGenericClass<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>  <span class="token comment">//定义泛型类，该类实现了泛型接口，此处接口的T是class的泛型参数T传入</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">//使用泛型类的类型作为参数的方法</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Compare</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TOther<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> data1<span class="token punctuation">,</span> <span class="token class-name">TOther</span> data2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token comment">//定义泛型方法</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultipleGenericClass<span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token punctuation">&gt;</span></span> <span class="token comment">//多个泛型参数</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","encrypt.html.vue"]]),d=JSON.parse('{"path":"/demo/encrypt.html","title":"密码加密的文章","lang":"zh-CN","frontmatter":{"icon":"lock","category":["使用指南"],"tag":["加密"],"feed":false,"seo":false,"head":[]},"headers":[],"git":{"createdTime":1713513980000,"updatedTime":1713513980000,"contributors":[{"name":"coreyan","email":"coreyan@vip.qq.com","commits":1}]},"readingTime":{"minutes":0.84,"words":252},"filePathRelative":"demo/encrypt.md","localizedDate":"2024年4月19日","excerpt":"\\n<p>实际的文章内容。</p>\\n<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>\\n<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">IGenericClass<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token comment\\">//定义泛型接口</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">GenericClass<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">IGenericClass<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span>  <span class=\\"token comment\\">//定义泛型类，该类实现了泛型接口，此处接口的T是class的泛型参数T传入</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> data<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">//使用泛型类的类型作为参数的方法</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token generic-method\\"><span class=\\"token function\\">Compare</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>TOther<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> data1<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TOther</span> data2<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">//定义泛型方法</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MultipleGenericClass<span class=\\"token punctuation\\">&lt;</span>T1<span class=\\"token punctuation\\">,</span> T2<span class=\\"token punctuation\\">,</span> T3<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token comment\\">//多个泛型参数</span>\\n<span class=\\"token punctuation\\">{</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,d as data};
